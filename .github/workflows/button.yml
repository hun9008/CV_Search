name: button deploy to NCP (Node.js)
run-name: Running
on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: dev_crawl

    # Node.js 설정
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    # npm 패키지 설치
    - name: Install dependencies
      run: npm install

    # 애플리케이션 빌드
    - name: Build application
      run: npm run build

    # Secret 환경 변수 설정
    - name: Setting secret
      run: |
        mkdir -p src/config
        echo "${{ secrets.SECRET_JSON }}" | base64 --decode > src/config/secret.json
        find src/config
      shell: bash

    # .env 파일 생성
    - name: Create .env file
      run: |
        echo "MONGODB_ADMIN_URI=${{ secrets.MONGO_DB_ADMIN_URI }}" >> .env
        echo "MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }}" >> .env

    # Docker 이미지 빌드 및 푸시
    - name: Docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build --build-arg MONGODB_ADMIN_URI=${{ secrets.MONGO_DB_ADMIN_URI }} --build-arg MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }} -t ${{ secrets.DOCKER_REPO }}/cv_search .
        docker push ${{ secrets.DOCKER_REPO }}/cv_search

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # NCP 서버에 배포
    - name: Deploy to NCP
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.NCP_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        password: ${{ secrets.NCP_PASSWORD }}
        port: ${{ secrets.NCP_PORT }}
        script: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker rm -f $(sudo docker ps -a -q)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/cv_search
          sudo docker run -d -p 3000:3000 --env-file .env ${{ secrets.DOCKER_REPO }}/cv_search
          sudo docker image prune -f
