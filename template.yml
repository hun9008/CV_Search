service: cv-search-crawler

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-northeast-2  # 서울 리전 (필요에 따라 변경)
  memorySize: 2048        # Lambda 메모리 할당 (MB)
  timeout: 900            # Lambda 최대 실행 시간 (초) - 15분
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    MAX_EXECUTION_TIME: 840000  # 14분 (ms)
    TIME_PER_URL: 10000         # URL당 10초 (ms)
    LOG_LEVEL: info
    # MongoDB 연결 정보
    MONGODB_ADMIN_URI: ${ssm:/cv-search/mongodb-uri~true}  # AWS SSM 파라미터 스토어에서 가져옴

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource:
            - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/cv-search/*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:*"

functions:
  crawl:
    handler: src/index.handler  # 앞서 작성한 index.js의 핸들러 함수
    description: "웹 크롤링을 수행하는 Lambda 함수"
    layers:
      - { Ref: ChromiumLambdaLayer }  # Chromium 레이어 참조
    events:
      # API Gateway 엔드포인트 (토큰 인증 포함)
      - http:
          path: /crawl
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
      # 1시간마다 웜업 요청 스케줄러 (콜드 스타트 방지)
      - schedule:
          rate: rate(1 hour)
          enabled: true
          input:
            ping: true

    vpc:
      # 필요한 경우 VPC 설정 (MongoDB가 VPC 내에 있는 경우)
      securityGroupIds:
        - ${ssm:/cv-search/security-group-id}
      subnetIds:
        - ${ssm:/cv-search/subnet-id-1}
        - ${ssm:/cv-search/subnet-id-2}

  # 즉각적인 웜업을 위한 함수
  warmup:
    handler: src/index.handler
    description: "크롤러 웜업 Lambda 함수"
    memorySize: 128
    timeout: 30
    layers:
      - { Ref: ChromiumLambdaLayer }
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true
          input:
            ping: true

# Lambda 레이어 정의
layers:
  chromium:
    name: ${self:service}-chromium
    description: Chromium 브라우저를 위한 Lambda 레이어
    compatibleRuntimes:
      - nodejs20.x
    path: layers/chrome-aws-lambda
    # 외부 레이어 사용시 아래 주석 해제 및 ARN 업데이트
    # arn: arn:aws:lambda:ap-northeast-2:764866452798:layer:chrome-aws-lambda:35


Resources:
  # API Gateway 사용자 인증
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CrawlerCognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId:
        Ref: ApiGatewayRestApi
      ProviderARNs:
        - ${ssm:/cv-search/cognito-user-pool-arn}

  # CloudWatch 로그 그룹
  CrawlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/${self:service}-${opt:stage, 'dev'}-crawl
      RetentionInDays: 30

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
    excludeFiles: src/**/*.test.js

  # 로컬 개발 설정
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002